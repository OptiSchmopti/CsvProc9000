@page "/rule/{Index:int}"
@using CsvProc9000.Model.Configuration
@using CsvProc9000.UI.Wpf.States

@inject IConfigurationState State
@inject NavigationManager NavigationManager

<h1>Edit Rule: @_rule?.GetName()</h1>

@if (_rule == null)
{
    <p>There was an error loading the Rule...</p>
    return;
}

<div>
    <div class="row">
        Name:
        <InputText type="text" @bind-Value="@_rule.Name"></InputText>
    </div>

    <div class="mt-2">
        <h3>Conditions</h3>

        <p>
            <b>All</b> the Conditions that must apply ...
        </p>

        <table class="table">
            <thead>
            <tr>
                <th scope="col">If the Field ...</th>
                <th scope="col">... has the Value ...</th>
                <th scope="col"></th>
            </tr>
            </thead>

            <tbody>
            @foreach (var condition in _rule.Conditions)
            {
                <tr>
                    <td>
                        <InputText @bind-Value="@condition.Field"></InputText>
                    </td>
                    <td>
                        <InputText @bind-Value="@condition.Value"></InputText>
                    </td>
                    <td>
                        <button class="btn btn-danger oi oi-minus" @onclick="() => RemoveCondition(condition)"></button>
                    </td>
                </tr>
            }

            </tbody>
        </table>

        <div class="mt-2">
            <button class="btn btn-success float-end oi oi-plus" @onclick="AddCondition"></button>
        </div>
    </div>

    <div class="mt-2">
        <h3>Changes</h3>
        <p>
            ... so that <b>all</b> these changes can be applied
        </p>

        <table class="table">
            <thead>
            <tr>
                <th scope="col">Change this Field ...</th>
                <th scope="col">... to this Value ...</th>
                <th scope="col">... in this mode ...</th>
                <th scope="col">... optionally at this index ...</th>
                <th scope="col"></th>
            </tr>
            </thead>

            <tbody>
            @foreach (var change in _rule.Changes)
            {
                <tr>
                    <td>
                        <InputText @bind-Value="@change.Field"></InputText>
                    </td>
                    <td>
                        <InputText @bind-Value="@change.Value"></InputText>
                    </td>
                    <td>
                        <InputSelect TValue="ChangeMode" @bind-Value="@change.Mode">
                            @foreach (var mode in Enum.GetValues<ChangeMode>())
                            {
                                <option value="@mode">@mode.ToString()</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <InputNumber TValue="int?" @bind-Value="@change.FieldIndex"></InputNumber>
                    </td>
                    <td>
                        <button class="btn btn-danger oi oi-minus" @onclick="() => RemoveChange(change)"></button>
                    </td>
                </tr>
            }

            </tbody>
        </table>

        <div class="mt-2">
            <button class="btn btn-success float-end oi oi-plus" @onclick="AddChange"></button>
        </div>
    </div>

    <div class="mt-5">
        <button class="btn btn-primary float-start" @onclick="Ok">OK</button>
    </div>
</div>

@code {

    [Parameter]
    public int Index { get; set; }

    private Rule _rule;

    protected override void OnInitialized()
    {
        _rule = State.GetRuleAt(Index);
        _rule.Conditions ??= new List<Condition>();
        _rule.Changes ??= new List<Change>();
    }

    private void RemoveCondition(Condition condition)
    {
        _rule.Conditions.Remove(condition);
    }

    private void AddCondition()
    {
        _rule.Conditions.Add(new Condition());
    }

    private void RemoveChange(Change change)
    {
        _rule.Changes.Remove(change);
    }

    private void AddChange()
    {
        var change = new Change
        {
            FieldIndex = null,
            Mode = ChangeMode.AddOrUpdate,
        };
        _rule.Changes.Add(change);
    }

    private void Ok()
    {
        NavigationManager.NavigateTo("/config");
    }

}